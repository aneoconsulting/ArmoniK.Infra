# Default values for armonik-compute-plane.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: "armonik-compute-plane"
# -- namespace is the namespace used for all resources
namespace: "armonik"
replicaCount: 1

#image:
# tag: ""
#imagePullSecrets: []
#computePlaneSelector: []
shareProcessNamespace: false
restartPolicy: Always
computePlane:
  metadata:
    labels:
      app: "armonik"
      service: "compute-plane"
  partition: 
    default:
      replicas: 0 # number of replicas for each deployment of compute plane
      # ArmoniK polling agent
      pollingAgent:
        image: "dockerhubaneo/armonik_pollingagent"
        #tag: ""
        # imagePullPolicy: "IfNotPresent"
        limits:
          cpu: "2000m"
          memory: "2048Mi"
        requests:
          cpu: "50m"
          memory: "50Mi"
      # ArmoniK workers
      worker:
        - name: "default-worker"
          image: "dockerhubaneo/armonik_worker_dll"
          #tag: ""
          imagePullPolicy: "IfNotPresent"
          limits:
            cpu: "1000m"
            memory: "1024Mi"
          requests:
            cpu: "50m"
            memory: "50Mi"
      hpa:
        type: "prometheus"
        polling_interval: 15
        cooldown_period: 300
        min_replica_count: 0
        max_replica_count: 5
        behavior:
          restore_to_original_replica_count: true
          stabilization_window_seconds: 300
          type: "Percent"
          value: 100
          period_seconds: 15
        triggers:
          - type: "prometheus"
            threshold: 2

    # Partition for the stream worker
    stream:
      replicas: 0
      pollingAgent:
        image: "dockerhubaneo/armonik_core_stream_test_client"
        #tag: ""
        #image_pull_policy: "IfNotPresent"
        limits:
          cpu: "2000m"
          memory: "2048Mi"
        requests:
          cpu: "50m"
          memory: "50Mi"
      worker:
        - name: "stream-worker"
          image: "dockerhubaneo/armonik_core_stream_test_worker"
          #tag: ""
          #image_pull_policy: "IfNotPresent"
          limits:
            cpu: "1000m"
            memory: "1024Mi"
          requests:
            cpu: "50m"
            memory: "50Mi"
      hpa:
        type: "prometheus"
        polling_interval: 15
        cooldown_period: 300
        minReplicaCount: 0
        maxReplicaCount: 5
        behavior:
          restoreToOriginalReplicaCount: true
          stabilizationWindowSeconds: 300
          type: "Percent"
          value: 100
          period_seconds: 15
        triggers:
          - type: "prometheus"
            threshold: 2

    # Partition for the htcmock worker        
    htcmock:
      replicas: 0
      pollingAgent:
        image: "dockerhubaneo/armonik_core_htcmock_test_client"
        #tag: ""
        #image_pull_policy: "IfNotPresent"
        limits:
          cpu: "2000m"
          memory: "2048Mi"
        requests:
          cpu: "50m"
          memory: "50Mi"
      worker:
        - name: "htcmock-worker"
          image: "dockerhubaneo/armonik_core_htcmock_test_worker"
          limits:
            cpu: "1000m"
            memory: "1024Mi"
          requests:
            cpu: "50m"
            memory: "50Mi"
      hpa:
        type: "prometheus"
        pollingInterval: 15
        cooldownPeriod: 300
        minReplicaCount: 0
        maxReplicaCount: 5
        behavior:
          restoreToOriginalReplicaCount: true
          stabilizationWindowSeconds: 300
          type: "Percent"
          value: 100
          periodSeconds: 15
        triggers:
          - type: "prometheus"
            threshold: 2


    # Partition for the bench worker        
    bench:
      replicas: 0
      pollingAgent:
        image: "dockerhubaneo/armonik_core_bench_test_client"
        #tag: ""
        #image_pull_policy: "IfNotPresent"
        limits:
          cpu: "2000m"
          memory: "2048Mi"
        requests:
          cpu: "50m"
          memory: "50Mi"
      worker:
        - name: "bench-worker"
          image: "dockerhubaneo/armonik_core_bench_test_worker"
          limits:
            cpu: "1000m"
            memory: "1024Mi"
          requests:
            cpu: "50m"
            memory: "50Mi"
      hpa:
        type: "prometheus"
        pollingInterval: 15
        cooldownPeriod: 300
        minReplicaCount: 0
        maxReplicaCount: 5
        behavior:
          restoreToOriginalReplicaCount: true
          stabilizationWindowSeconds: 300
          type: "Percent"
          value: 100
          period_seconds: 15
        triggers:
          - type: "prometheus"
            threshold: 2

pollingAgent:
  name: polling-agent
  image:
  imagePullPolicy:
  ports:
    name: poll-agent-port
    containerPort: 1080
  livenessProbe:
    httpGet:
      path: "/liveness"
      port: 1080
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  startupProbe:
    httpGet:
      path: "/startup"
      port: 1080
    initialDelaySeconds: 1
    periodSeconds: 3
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 20
  workerCheckRetries: "10"  
  workerCheckDelay: "00:00:10"

supportedQueues:
  - Amqp__PartitionId
  - PubSub__PartitionId
  - SQS__PartitionId

credentials:
  # activemq
  Amqp__User:
    key: username
    name: activemq
  Amqp__Password:
    key: password
    name: activemq
  Amqp__Host:
    key: host
    name: activemq
  Amqp__Port:
    key: port
    name: activemq
  # redis  
  Redis__User:
    key: username
    name: redis
  Redis__Password:
    key: password
    name: redis
  Redis__EndpointUrl:
    key: url
    name: redis
  # mongodb
  MongoDB__User:
    key: username
    name: mongodb
  MongoDB__Password:
    key: password
    name: mongodb
  MongoDB__Host:
    key: host
    name: mongodb
  MongoDB__Port:
    key: port
    name: mongodb
  # s3
  # - key: username
  #   name: s3
  # - key: password
  #   name: mongodb
  # - key: url
  #   name: s3
  # - key: must_force_path_style
  #   name: s3
  # - key: bucket_name
  #   name: s3
  # - key: use_chunk_encoding
  #   name: s3
  # - key: use_check_sum
  #   name: s3
 
volumeMount:  
 name: "cache-volume"
 mountPath: "/cache"

certificates:
  activemq:
    name: "activemq-secret-volume"
    mountPath: "/amqp"
    secretName: "activemq"
  redis:
    name: "redis-secret-volume"
    mountPath: "/redis"
    secretName: "redis"
  mongodb:
    name: "mongodb-secret-volume"
    mountPath: "/mongodb"
    secretName: "mongodb"


pollingAgentConfigmaps:
  - "log-configmap"
  - "polling-agent-configmap" 
  - "core-configmap"     
  - "compute-plane-configmap" 

workerConfigmaps:
  - "worker-configmap"
  - "compute-plane-configmap" 
  - "log-configmap"     

checkFileStorageType: "FS"
fileStorageType: "nfs"

fileStorageEndpoints: 
  s3Storage:
    ServiceURL: {}
    AccessKeyId: {}
    SecretAccessKey: {}
    BucketName: {}
    MustForcePathStyle: {}
    UseChunkEncoding: {}
    UseChecksum: {}

preStopWaitScript: "<<EOF while test -e /cache/armonik_agent.sock ; do   sleep 1 done EOF"


FS: 
  name: "shared-volume"
  mountPath: "/data"

nfs:
  name: "shared-volume"
  path: "/data"
  server: "test"

hostPath: 
  name: "shared-volume"
  path: "/data"


extraConf:
  compute: {}
  control: {}
  core: {}
  log: {}
  polling: {}
  worker: {}
