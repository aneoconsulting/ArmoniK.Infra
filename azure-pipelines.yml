trigger:
  - "*"

resources:
- repo: self

parameters:
  - name: TAGInput
    default: 'armonik-dev-$(Build.BuildId)'
  - name: BaseBranch
    default: 'master'

variables:
- group: publish-keys
- name : TAGVar
  value: '${{parameters.TAGInput}}'

stages:
- stage: LocalIntegrationTest
  displayName: Local Integration Test
  jobs:
  - job: BuildRun
    displayName: Build And Run
    pool:
      name : $(AgentPoolName)
      vmImage : 'ubuntu-20.04'
    steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '5.0.x'
      - script: sudo  apt update && sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release jq make
        displayName: Install dependencies
      - script: bash tools/install/docker.sh && sudo chown :sudo /var/run/docker.sock
        displayName: Install Docker
      - script: bash tools/install/kubectl.sh
        displayName: Install Kubectl
      - script: bash tools/install/terraform.sh
        displayName: Install Terraform
      - script: bash tools/install/k3s.sh
        displayName: Install k3s
      - script: |
          set -ex
          git clone https://$(DevopsPAT)@dev.azure.com/aneofr/ArmoniK/_git/ArmoniK.Base -b ${{parameters.BaseBranch}}
          cd ArmoniK.Base
          export ARMONIK_IMAGES_TAG=devops
          docker build -t armonik_control:$ARMONIK_IMAGES_TAG -f src/Control/src/Dockerfile .
          docker build -t armonik_pollingagent:$ARMONIK_IMAGES_TAG -f src/Compute/PollingAgent/src/Dockerfile .
          docker build -t armonik_worker_htcmock:$ARMONIK_IMAGES_TAG -f Samples/HtcMock/GridWorker/src/Dockerfile .
          docker build -t armonik_worker_symphony:$ARMONIK_IMAGES_TAG -f DevelopmentKit/csharp/WorkerApi/ArmoniK.DevelopmentKit.WorkerApi/Dockerfile .
        displayName: Build ArmoniK Images
      - script: |
          set -ex
          cd infrastructure/localhost
          cp utils/envvars.conf ./envvars.conf
          source ./envvars.conf

          kubectl create namespace $ARMONIK_NAMESPACE
          kubectl create secret generic $ARMONIK_OBJECT_STORAGE_SECRET_NAME \
            --namespace=$ARMONIK_NAMESPACE \
            --from-file=cert_file=$ARMONIK_OBJECT_STORAGE_CERTIFICATES_DIRECTORY/cert.crt \
            --from-file=key_file=$ARMONIK_OBJECT_STORAGE_CERTIFICATES_DIRECTORY/cert.key \
            --from-file=ca_cert_file=$ARMONIK_OBJECT_STORAGE_CERTIFICATES_DIRECTORY/ca.crt \
            --from-file=certificate_pfx=$ARMONIK_OBJECT_STORAGE_CERTIFICATES_DIRECTORY/certificate.pfx
          kubectl create secret generic $ARMONIK_QUEUE_STORAGE_SECRET_NAME \
            --namespace=$ARMONIK_NAMESPACE \
            --from-file=$ARMONIK_QUEUE_STORAGE_CREDENTIALS_DIRECTORY/jetty-realm.properties
          cd ./deploy

          sed "s%dockerhubaneo/armonik_control%armonik_control%" -i parameters.tfvars
          sed "s%dockerhubaneo/armonik_pollingagent%armonik_pollingagent%" -i parameters.tfvars
          sed "s%dockerhubaneo/armonik_compute%armonik_worker_htcmock%" -i parameters.tfvars
          sed 's%dev-.*"%devops"%' -i parameters.tfvars
          make all CONFIG_FILE=parameters.tfvars
        displayName: Deploy Infra With HtcMock
      - script: |
          set -ex
          export CPIP=$(kubectl get svc control-plane -n armonik -o custom-columns="IP:.status.loadBalancer.ingress[*].ip" --no-headers=true)
          export ReIP=$(kubectl get svc redis -n armonik -o custom-columns="IP:.status.loadBalancer.ingress[*].ip" --no-headers=true)
          export CPPort=$(kubectl get svc control-plane -n armonik -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
          export RePort=$(kubectl get svc redis -n armonik -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
          export Grpc__Endpoint=http://$CPIP:$CPPort
          export Redis__EndpointUrl=$ReIP:$RePort
          export Redis__SslHost="127.0.0.1"
          export Redis__Timeout=3000
          export Redis__CaCertPath=$PWD/infrastructure/localhost/credentials/ca.crt
          export Redis__ClientPfxPath=$PWD/infrastructure/localhost/credentials/certificate.pfx

          cd ArmoniK.Base/Samples/HtcMock/Client/src
          dotnet build "ArmoniK.Samples.HtcMock.Client.csproj" -c Release
          cd bin/Release/net5.0/
          time dotnet ArmoniK.Samples.HtcMock.Client.dll
        displayName: Run HtcMock