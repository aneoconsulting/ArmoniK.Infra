name: 'Deploy ArmoniK Infra'
description: 'Action to deploy ArmoniK infra in current github workflow'
inputs:
  control-plane-image:
    description: 'Repository/image for control plane docker image'
    required: false
    default: 'None'
  control-plane-tag:
    description: 'Tag for control plane docker image'
    required: false
    default: 'None'
  polling-agent-image:
    description: 'Repository/image for polling agent docker image'
    required: false
    default: 'None'
  polling-agent-tag:
    description: 'Tag for polling agent docker image'
    required: false
    default: 'None'
  worker-image:
    description: 'Repository/image for worker docker image'
    required: false
    default: 'None'
  worker-tag:
    description: 'Tag for worker docker image'
    required: false
    default: 'None'
  metrics-exporter-image:
    description: 'Repository/image for metrics exporter docker image'
    required: false
    default: 'None'
  metrics-exporter-tag:
    description: 'Tag for metrics exporter docker image'
    required: false
    default: 'None'
  docker-is-installed:
    description: 'Is docker installed ?'
    required: false
    default: 'false'
  log-level:
    description: 'Log Level'
    required: false
    default: 'Information'

outputs:
  host-path:
    description: 'Path of the shared storage between workers'
    value: ${{ steps.sethostpath.outputs.host-path }}

runs:
  using: composite
  steps:
    - name: Install Dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release jq python3 python-is-python3 python3-pip
        pip install python-hcl2 jsonpath-ng

    - if: ${{ inputs.docker-is-installed != 'true' }}
      name: Install docker
      shell: bash
      run: |
        cd ${{ github.action_path }}
        sh tools/install/docker.sh

    - name: Install kubectl
      shell: bash
      run: |
        cd ${{ github.action_path }}
        sh tools/install/kubectl.sh

    - name: Install terraform
      shell: bash
      run: |
        cd ${{ github.action_path }}
        sh tools/install/terraform.sh

    - name: Install K3s
      shell: bash
      run: |
        cd ${{ github.action_path }}
        bash tools/install/k3s.sh

    - name: Set the path of the shared storage
      id: sethostpath
      shell: bash
      run: |
        set -ex
        cd ${{ github.action_path }}/infrastructure/quick-deploy/localhost
        source envvars.sh
        echo "::set-output name=host-path::${ARMONIK_SHARED_HOST_PATH}"

    - name: Create shared host path directory
      shell: bash
      run: |
        set -ex
        cd ${{ github.action_path }}/infrastructure/quick-deploy/localhost
        source envvars.sh
        mkdir -p ${ARMONIK_SHARED_HOST_PATH}

    - name: Create Kubernetes namespace
      shell: bash
      run: |
        set -ex
        cd ${{ github.action_path }}/infrastructure/quick-deploy/localhost
        source envvars.sh
        cd ${{ github.action_path }}/infrastructure/quick-deploy/localhost
        make create-namespace

    - name: Deploy storage
      shell: bash
      run: |
        set -ex
        cd ${{ github.action_path }}/infrastructure/quick-deploy/localhost
        source envvars.sh
        cd ${{ github.action_path }}/infrastructure/quick-deploy/localhost
        make deploy-storage

    - name: Deploy monitoring
      shell: bash
      run: |
        set -ex
        python ${{ github.action_path }}/tools/modify_parameters.py \
                  -kv "monitoring.metrics_exporter.image=${{ inputs.metrics-exporter-image }}" \
                  -kv "monitoring.metrics_exporter.tag=${{ inputs.metrics-exporter-tag }}" \
                  ${{ github.action_path }}/infrastructure/quick-deploy/localhost/monitoring/parameters.tfvars \
                  ${{ github.action_path }}/infrastructure/quick-deploy/localhost/monitoring/parameters.tfvars.json
        cd ${{ github.action_path }}/infrastructure/quick-deploy/localhost
        make deploy-monitoring PARAMETERS_FILE=${{ github.action_path }}/infrastructure/quick-deploy/localhost/monitoring/parameters.tfvars.json

    - name: Deploy ArmoniK
      shell: bash
      run: |
        set -ex
        python ${{ github.action_path }}/tools/modify_parameters.py \
          -kv "compute_plane[*].worker[*].image=${{ inputs.worker-image }}" \
          -kv "compute_plane[*].worker[*].tag=${{ inputs.worker-tag }}" \
          -kv "compute_plane[*].polling_agent.image=${{ inputs.polling-agent-image }}" \
          -kv "compute_plane[*].polling_agent.tag=${{ inputs.polling-agent-tag }}" \
          -kv control_plane.image=${{ inputs.control-plane-image }} \
          -kv control_plane.tag=${{ inputs.control-plane-tag }} \
          -kv logging_level=${{ inputs.log-level }} \
          ${{ github.action_path }}/infrastructure/quick-deploy/localhost/armonik/parameters.tfvars \
          ${{ github.action_path }}/infrastructure/quick-deploy/localhost/armonik/parameters.tfvars.json
        cd ${{ github.action_path }}/infrastructure/quick-deploy/localhost
        make deploy-armonik PARAMETERS_FILE=${{ github.action_path }}/infrastructure/quick-deploy/localhost/armonik/parameters.tfvars.json

    - name: Copy logs
      if: always()
      shell: bash
      run: |
        set -e
        mkdir -p /tmp/armoniklogs
        sudo cp -rL /var/log/pods/armonik* /tmp/armoniklogs
        sudo chown $USER -R /tmp/armoniklogs
        find /tmp/armoniklogs -name "*.log"

    - name: Store logs
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: Logs ArmoniK - ${{ github.job }}
        path: /tmp/armoniklogs/**/*.log
        retention-days: 5