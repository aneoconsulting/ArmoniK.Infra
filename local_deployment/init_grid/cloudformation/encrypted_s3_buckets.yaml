---
# Copyright 2021 Amazon.com, Inc. and its affiliates. All Rights Reserved.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#                 http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.nse.

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Security: KMS customer managed CMK for AWS services'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Tag needs to follow S3 naming rules.'
      Parameters:
      - BucketTag
Parameters:
  BucketTag:
    Description: 'Recommended to prefix the different required buckets'
    Type: String
    Default: ''
Resources:
  Key:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Type: 'AWS::KMS::Key'
    Properties:
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action: 'kms:*'
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: !Sub '${AWS::AccountId}'
          Action:
          - kms:Encrypt*
          - kms:Decrypt*
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:Describe*
          Resource: '*'
          Condition:
            StringEquals:
              kms:ViaService:
              - !Sub 'ec2.${AWS::Region}.amazonaws.com' 
              - !Sub 's3.${AWS::Region}.amazonaws.com'
              - !Sub 'sqs.${AWS::Region}.amazonaws.com' 
              - !Sub 'dynamodb.${AWS::Region}.amazonaws.com'
              - !Sub 'ecr.${AWS::Region}.amazonaws.com'
              - !Sub 'eks.${AWS::Region}.amazonaws.com'
              - !Sub 'elasticache.${AWS::Region}.amazonaws.com'
              - !Sub 'lambda.${AWS::Region}.amazonaws.com'
        - Effect: Allow
          Principal:
            Service: !Sub 'logs.${AWS::Region}.amazonaws.com'
          Action:
          - kms:Encrypt*
          - kms:Decrypt*
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:Describe*
          Resource: '*'
          Condition:
            ArnEquals:
              kms:EncryptionContext:aws:logs:arn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*:*'
        - Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
          #Principal:
          #  AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com'
          Action:
          - kms:Encrypt*
          - kms:Decrypt*
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:Describe*
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
          #Principal:
          #  AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com'
          Action:
          - kms:CreateGrant
          Resource: '*'
          Condition:
            Bool:
              kms:GrantIsForAWSResource: true
  KeyAlias:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub 'alias/${BucketTag}-htc-grid-KMS-key'
      TargetKeyId: !Ref Key
  ImageTfstateHtcGrid:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub
        - '${BucketTag}-image-tfstate-htc-grid-${RANDOM}'
        - RANDOM: !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId' ]]]]
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              KMSMasterKeyID: !GetAtt 'Key.Arn'
    DeletionPolicy: Delete
  TfstateHtcGrid:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub
        - '${BucketTag}-tfstate-htc-grid-${RANDOM}'
        - RANDOM: !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId' ]]]]
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              KMSMasterKeyID: !GetAtt 'Key.Arn'
    DeletionPolicy: Delete
  LambdaUnitHtcGrid:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub
        - '${BucketTag}-lambda-unit-htc-grid-${RANDOM}'
        - RANDOM: !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId' ]]]]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              KMSMasterKeyID: !GetAtt 'Key.Arn'
    DeletionPolicy: Delete
Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  KeyId:
    Description: 'Key id.'
    Value: !Ref Key
    Export:
      Name: !Sub '${AWS::StackName}-KeyId'
  KeyArn:
    Description: 'Key ARN.'
    Value: !GetAtt 'Key.Arn'
    Export:
      Name: !Sub '${AWS::StackName}-KeyArn'
  ImageTfstateHtcGridBucketId:
    Description: 'S3 bucket name of image tfstate htc-grid'
    Value: !Ref ImageTfstateHtcGrid
  TfstateHtcGridBucketId:
    Description: 'S3 bucket name of tfstate htc-grid'
    Value: !Ref TfstateHtcGrid
  LambdaUnitHtcGridBucketId:
    Description: 'S3 bucket name of lambda unit htc-grid'
    Value: !Ref LambdaUnitHtcGrid