apiVersion: v1
data:
  environment.json: '{"color":"blue","description":"Local development environment","name":"local-dev","version":"0.0.0"}'
  gui_configuration: '{}'
immutable: false
kind: ConfigMap
metadata:
  name: ingress-nginx-static
---
apiVersion: v1
data:
  armonik.conf: |
    map $http_accept_language $accept_language {
        default en;
        ~*^en en;
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    server {
        listen 8080;
        listen [::]:8080;
        listen 9080 http2;
        listen [::]:9080 http2;

        sendfile on;
        resolver kube-dns.kube-system ipv6=off;

        location = / {
            rewrite ^ $scheme://$http_host/admin/$accept_language/;
        }

        location = /admin {
            rewrite ^ $scheme://$http_host/admin/$accept_language/;
        }
        location = /admin/ {
            rewrite ^ $scheme://$http_host/admin/$accept_language/;
        }
        location = /admin/en {
            rewrite ^ $scheme://$http_host/admin/en/;
        }
        set $admin_app_upstream http://gui.default.svc.cluster.local:2080;
        location /admin/ {
            proxy_pass $admin_app_upstream$uri$is_args$args;
        }
        set $armonik_upstream grpc://control-plane.default.svc.cluster.local:1080;
        location ~* ^/armonik\. {
            grpc_pass $armonik_upstream;

            # Apparently, multiple chunks in a grpc stream is counted has a single body
            # So disable the limit
            client_max_body_size 0;

            # add a timeout of 1 month to avoid grpc exception for long task
            # TODO: find better configuration
            proxy_read_timeout 30d;
            proxy_send_timeout 1d;
            grpc_read_timeout 30d;
            grpc_send_timeout 1d;

            # Try force keep alive
            add_header Connection Keep-Alive;
            add_header Proxy-Connection Keep-Alive;
        }

        location /static/ {
            alias /static/;
        }


      proxy_buffering off;
      proxy_request_buffering off;



        set $seq_upstream http://10.43.150.249:8080;
        location = /seq {
            rewrite ^ $scheme://$http_host/seq/ permanent;
        }
        location /seq/ {
            proxy_set_header Host $http_host;
            proxy_set_header Accept-Encoding "";
            rewrite  ^/seq/(.*)  /$1 break;
            proxy_pass $seq_upstream$uri$is_args$args;
            sub_filter '<head>' '<head><base href="${scheme}://${http_host}/seq/">';
            sub_filter_once on;
            proxy_hide_header content-security-policy;
        }
        set $grafana_upstream http://10.43.130.56:3000;
        location = /grafana {
            rewrite ^ $scheme://$http_host/grafana/ permanent;
        }
        location /grafana/ {
            rewrite  ^/grafana/(.*)  /$1 break;
            proxy_set_header Host $http_host;
            proxy_pass $grafana_upstream$uri$is_args$args;
            sub_filter '<head>' '<head><base href="${scheme}://${http_host}/grafana/">';
            sub_filter_once on;
            proxy_intercept_errors on;
            error_page 301 302 307 =302 ${scheme}://${http_host}${upstream_http_location};
        }
        location /grafana/api/live {
            rewrite  ^/grafana/(.*)  /$1 break;
            proxy_http_version 1.1;
            proxy_set_header Host $http_host;
            proxy_pass $grafana_upstream$uri$is_args$args;
        }
    }
immutable: false
kind: ConfigMap
metadata:
  name: ingress-nginx
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: armonik
    service: ingress
  name: ingress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: armonik
      service: ingress
  template:
    metadata:
      labels:
        app: armonik
        service: ingress
      name: ingress
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: ingress-nginx
            optional: false
        image: nginxinc/nginx-unprivileged:1.27.0-alpine-slim
        name: ingress
        ports:
        - containerPort: 8080
          name: ingress-p-http
          protocol: TCP
        - containerPort: 9080
          name: ingress-p-grpc
          protocol: TCP
        volumeMounts:
        - mountPath: /etc/nginx/conf.d
          name: ingress-nginx
          readOnly: true
        - mountPath: /static
          name: static
          readOnly: true
      restartPolicy: Always
      volumes:
      - configMap:
          defaultMode: 420
          name: ingress-nginx
          optional: false
        name: ingress-nginx
      - configMap:
          defaultMode: 420
          name: ingress-nginx-static
          optional: false
        name: static
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: armonik
    service: ingress
  name: ingress
spec:
  ports:
  - name: ingress-p-http
    port: 5000
    protocol: TCP
    targetPort: ingress-p-http
  - name: ingress-p-grpc
    port: 5001
    protocol: TCP
    targetPort: ingress-p-grpc
  selector:
    app: armonik
    service: ingress
  type: LoadBalancer
