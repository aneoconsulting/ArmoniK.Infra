nameOverride: ""
replicaCount: 1
shareProcessNamespace: false
restartPolicy: Always
repository: dockerhubaneo
registry: ""
imagePullSecrets: []

global:
  imageRegistry: ""
  dependencies.keda: false

serviceAccount:
  create: true
  name: compute-plane
  annotations: {}
  secrets: []

service: {}

rbac:
  # Specifies whether RBAC resources should be created
  create: true
  # Note: PodSecurityPolicy will not be created when Kubernetes version is 1.25 or later.
  pspEnabled: false

podDisruptionBudget:
  # https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  enabled: false
  minAvailable:
  maxUnavailable:

computePlane:
  metadata:
    name: "compute-plane"
    labels:
      app: "armonik"
      service: "compute-plane"
  partition:
    default:
      replicas: 1
      pollingAgent:
        image: "armonik_pollingagent"
        tag: "0.31.2"
        imagePullPolicy: "IfNotPresent"
        limits:
          cpu: "1000m"
          memory: "1024Mi"
        requests:
          cpu: "500m"
          memory: "256Mi"
        securityContext:
          capabilities:
            drop:
            - SYS_PTRACE
          privileged: false
          runAsNonRoot: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: true
        enableServiceLinks: true
      annotations: {}
      nodeSelector: {}
      tolerations: []
      terminationGracePeriodSeconds: 30
      readinessProbe: {}
      livenessProbe:
        httpGet:
          path: "/liveness"
          port: 1080
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 10
        timeoutSeconds: 10
        successThreshold: 1
        failureThreshold: 3
      startupProbe:
        httpGet:
          path: "/startup"
          port: 1080
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 3
        timeoutSeconds: 1
        successThreshold: 1
        failureThreshold: 20
      envHardValue:
        - name: Amqp__PartitionId
          value: default
        - name: PubSub__PartitionId
          value: default
        - name: SQS__PartitionId
          value: default
      # ArmoniK workers
      worker:
        - name: "worker"
          image: "armonik_worker_dll"
          tag: "0.18.0"
          imagePullPolicy: "IfNotPresent"
          limits:
            cpu: "1000m"
            memory: "1024Mi"
          requests:
            cpu: "500m"
            memory: "512Mi"
      hpa:
        type: "prometheus"
        polling_interval: 15
        cooldown_period: 300
        min_replica_count: 0
        max_replica_count: 5
        behavior:
          restore_to_original_replica_count: true
          stabilization_window_seconds: 300
          type: "Percent"
          value: 100
          period_seconds: 15
        triggers:
          - type: "prometheus"
            metadata:
              serverAddress: http://prometheus-prometheus.{{ .Release.Namespace }}.svc.cluster.local:9090
              metricName: "armonik_default_tasks_queued"
              threshold: "2"
              namespace: "armonik"
              query: "armonik_default_tasks_queued{job=\"metrics-exporter\"}"

    # Partition for the stream worker
    stream:
      replicas: 1
      pollingAgent:
        image: "armonik_pollingagent"
        tag: "0.31.2"
        imagePullPolicy: "IfNotPresent"
        limits:
          cpu: "1000m"
          memory: "1024Mi"
        requests:
          cpu: "500m"
          memory: "256Mi"
        securityContext:
          capabilities:
            drop:
            - SYS_PTRACE
          privileged: false
          runAsNonRoot: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: true
        enableServiceLinks: true
      annotations: {}
      nodeSelector: {}
      tolerations: []
      terminationGracePeriodSeconds: 30
      readinessProbe: {}
      livenessProbe:
        httpGet:
          path: "/liveness"
          port: 1080
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 10
        timeoutSeconds: 10
        successThreshold: 1
        failureThreshold: 3
      startupProbe:
        httpGet:
          path: "/startup"
          port: 1080
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 3
        timeoutSeconds: 1
        successThreshold: 1
        failureThreshold: 20
      envHardValue:
        - name: Amqp__PartitionId
          value: stream
        - name: PubSub__PartitionId
          value: stream
        - name: SQS__PartitionId
          value: stream
        - name: MongoDB__User
          value: root
      # ArmoniK workers
      worker:
        - name: "worker"
          image: "armonik_core_stream_test_worker"
          tag: "0.31.2"
          imagePullPolicy: "IfNotPresent"
          limits:
            cpu: "1000m"
            memory: "1024Mi"
          requests:
            cpu: "500m"
            memory: "512Mi"
      hpa:
        type: "prometheus"
        polling_interval: 15
        cooldown_period: 300
        min_replica_count: 0
        max_replica_count: 5
        behavior:
          restore_to_original_replica_count: true
          stabilization_window_seconds: 300
          type: "Percent"
          value: 100
          period_seconds: 15
        triggers:
          - type: "prometheus"
            metadata:
              serverAddress: http://prometheus-prometheus.{{ .Release.Namespace }}.svc.cluster.local:9090
              metricName: "armonik_stream_tasks_queued"
              threshold: "2"
              namespace: "armonik"
              query: "armonik_stream_tasks_queued{job=\"metrics-exporter\"}"

    # Partition for the htcmock worker
    htcmock:
      replicas: 1
      pollingAgent:
        image: "armonik_pollingagent"
        tag: "0.31.2"
        imagePullPolicy: "IfNotPresent"
        limits:
          cpu: "1000m"
          memory: "1024Mi"
        requests:
          cpu: "500m"
          memory: "256Mi"
        securityContext:
          capabilities:
            drop:
            - SYS_PTRACE
          privileged: false
          runAsNonRoot: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: true
        enableServiceLinks: true
      annotations: {}
      nodeSelector: {}
      tolerations: []
      terminationGracePeriodSeconds: 30
      ImagePullSecrets:
        - name: ""
      readinessProbe: {}
      livenessProbe:
        httpGet:
          path: "/liveness"
          port: 1080
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 10
        timeoutSeconds: 10
        successThreshold: 1
        failureThreshold: 3
      startupProbe:
        httpGet:
          path: "/startup"
          port: 1080
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 3
        timeoutSeconds: 1
        successThreshold: 1
        failureThreshold: 20
      envHardValue:
        - name: Amqp__PartitionId
          value: htcmock
        - name: PubSub__PartitionId
          value: htcmock
        - name: SQS__PartitionId
          value: htcmock
        - name: MongoDB__User
          value: root
      envCommon:
        - name: ComputePlane__WorkerChannel__SocketType
          value: tcp
        - name: ComputePlane__WorkerChannel__Address
          value: http://localhost:6666
        - name: ComputePlane__AgentChannel__SocketType
          value: tcp
        - name: ComputePlane__AgentChannel__Address
          value: http://localhost:6667
      # ArmoniK workers
      worker:
        - name: "worker"
          image: "armonik_core_htcmock_test_worker"
          tag: "0.31.2"
          imagePullPolicy: "IfNotPresent"
          limits:
            cpu: "1000m"
            memory: "1024Mi"
          requests:
            cpu: "500m"
            memory: "512Mi"
      hpa:
        type: "prometheus"
        polling_interval: 15
        cooldown_period: 300
        min_replica_count: 0
        max_replica_count: 5
        behavior:
          restore_to_original_replica_count: true
          stabilization_window_seconds: 300
          type: "Percent"
          value: 100
          period_seconds: 15
        triggers:
          - type: "prometheus"
            metadata:
              serverAddress: http://prometheus-prometheus.{{ .Release.Namespace }}.svc.cluster.local:9090
              metricName: "armonik_htcmock_tasks_queued"
              threshold: "2"
              namespace: "armonik"
              query: "armonik_htcmock_tasks_queued{job=\"metrics-exporter\"}"

    # Partition for the bench worker
    bench:
      replicas: 1
      pollingAgent:
        image: "armonik_pollingagent"
        tag: "0.31.2"
        imagePullPolicy: "IfNotPresent"
        limits:
          cpu: "1000m"
          memory: "1024Mi"
        requests:
          cpu: "500m"
          memory: "256Mi"
        securityContext:
          capabilities:
            drop:
            - SYS_PTRACE
          privileged: false
          runAsNonRoot: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: true
        enableServiceLinks: true
      annotations: {}
      nodeSelector: {}
      tolerations: []
      terminationGracePeriodSeconds: 30
      readinessProbe: {}
      livenessProbe:
        httpGet:
          path: "/liveness"
          port: 1080
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 10
        timeoutSeconds: 10
        successThreshold: 1
        failureThreshold: 3
      startupProbe:
        httpGet:
          path: "/startup"
          port: 1080
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 3
        timeoutSeconds: 1
        successThreshold: 1
        failureThreshold: 20
      envHardValue:
        - name: Amqp__PartitionId
          value: bench
        - name: PubSub__PartitionId
          value: bench
        - name: SQS__PartitionId
          value: bench
        - name: MongoDB__User
          value: root
      # ArmoniK workers
      worker:
        - name: "worker"
          image: "armonik_core_bench_test_worker"
          tag: "0.31.2"
          imagePullPolicy: "IfNotPresent"
          limits:
            cpu: "1000m"
            memory: "1024Mi"
          requests:
            cpu: "500m"
            memory: "512Mi"
      hpa:
        type: "prometheus"
        polling_interval: 15
        cooldown_period: 300
        min_replica_count: 0
        max_replica_count: 5
        behavior:
          restore_to_original_replica_count: true
          stabilization_window_seconds: 300
          type: "Percent"
          value: 100
          period_seconds: 15
        triggers:
          - type: "prometheus"
            metadata:
              serverAddress: http://prometheus-prometheus.{{ .Release.Namespace }}.svc.cluster.local:9090
              metricName: "armonik_bench_tasks_queued"
              threshold: "2"
              namespace: "armonik"
              query: "armonik_bench_tasks_queued{job=\"metrics-exporter\"}"

triggers:
  suffix: "armonik-scaledobject"
  scaleTargetRef:
    # -- Kubernetes API version to be used
    apiVersion: "apps/v1"                                       # Optional. Default: apps/v1
    # -- Kid of the Kubernetes resource to be scaled
    kind: "Deployment"                                          # Optional. Default: Deployment
    # -- Name of the Kubernetes resource to be scaled
    name: "compute-plane"                                                    # Mandatory. Must be in the same namespace as the ScaledObject
    # -- Name of the container to be scaled
    #envSourceContainerName: ".spec.template.spec.containers[0]"   # Optional. Default: .spec.template.spec.containers[0]

  # -- Polling interval in seconds
  pollingInterval: 30                                          # Optional. Default: 30 seconds
  # -- Cooldown period in seconds
  cooldownPeriod: 300                                         # Optional. Default: 300 seconds
  # -- Count of idle replicas
  idleReplicaCount: 0                                           # Optional. Default: ignored, must be less than minReplicaCount
  # -- Minimum count of replicas
  minReplicaCount: 1                                           # Optional. Default: 0
  # -- Maximum count of replicas
  maxReplicaCount: 100                                         # Optional. Default: 100

    # -- Fallback options
  fallback:   # Optional. Section to specify fallback options
    # -- Threshold of failures
    failureThreshold: 3                                         # Mandatory if fallback section is included
    # -- Number of replicas
    replicas: 6                                                 # Mandatory if fallback section is included

  # -- Advanced options to manage the behavior of the HPA
  behavior:   # Optional. Section to specify advanced options
    # -- Restore to the original replicas count
    restoreToOriginalReplicaCount: false                        # Optional. Default: false
    # -- Stabilization window in seconds
    stabilizationWindowSeconds: 300
    # -- Type of the target
    type: Percent
    # -- Value of the target
    value: 100
    # -- Period in seconds
    periodSeconds: 15

pollingAgent:
  name: polling-agent
  ports:
    name: poll-agent-port
    containerPort: 1080
  volumeMounts:
    # - name: "activemq-crt"
    #   mountPath: "/amqp"
    #   mountPropagation: None
    #   readOnly: true
    # - name: mongodb-ca
    #   mountPath: "/mongodb/certs/"
    #   mountPropagation: None
    #   readOnly: true
    # - name: "redis-crt"
    #   mountPath: "/redis"
    #   mountPropagation: None
    #   readOnly: true
    - name: cache-volume
      mountPath: /cache
      mountPropagation: None
  envSecretValue:
    - name: MongoDB__Password
      valueFrom:
        secretKeyRef:
          key: mongodb-root-password
          name: mongodb
          optional: false
    # - name: MongoDB__User
    #   valueFrom:
    #     secretKeyRef:
    #       key: username
    #       name: mongodb-user
    #       optional: false
    - name: Redis__Password
      valueFrom:
        secretKeyRef:
          key: redis-password
          name: redis
  envConfigValue: []
  envFrom:
    # - secretRef:
    #     name: mongodb-ca
    #     optional: false
    # - secretRef:
    #     name: activemq-crt
    #     optional: false
    # - secretRef:
    #     name: redis-crt
    #     optional: false
    - configMapRef:
        name: compute-plane-configmap
        optional: false
    - configMapRef:
        name: core-configmap
        optional: false
    - configMapRef:
        name: log-configmap
        optional: false
    - configMapRef:
        name: polling-configmap
        optional: false

worker:
  name: worker
  ports:
    name: worker-port
    containerPort: 1081
  livenessProbe:
    httpGet:
      path: "/liveness"
      port: 1080
      scheme: HTTP
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  startupProbe:
    httpGet:
      path: "/startup"
      port: 1080
      scheme: HTTP
    initialDelaySeconds: 1
    periodSeconds: 3
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 20
  terminationMessagePath: "/dev/termination-log"
  terminationMessagePolicy: "File"
  resource:
    limits:
      cpu: "1000m"
      memory: "1024Mi"
    requests:
      cpu: "500m"
      memory: "256Mi"
  volumeMounts:
    # - name: "shared-volume"
    #   hostPath:
    #     path: "/data"
    #     type: Directory
    - name: cache-volume
      mountPath: /cache
      mountPropagation: None

  envHardValue: []
  envSecretValue: []
  envConfigValue: []
  envFrom:
    - configMapRef:
        name: compute-plane-configmap
        optional: false
    - configMapRef:
        name: log-configmap
        optional: false
    - configMapRef:
        name: worker-configmap
        optional: false

fluentBit:
  isDaemonSet: true
  name: "fluent-bit"
  repository: "fluent"
  image: "fluent-bit"
  tag: "2.0.9"
  imagePullPolicy: "IfNotPresent"
  configMapRef: "fluent-bit-config"
  volumeMounts:
    - name: "cache-volume"
      mountPath: "/cache"
      readOnly: true
  fluentVolumes:
    - name: "fluentbitstate"
      mountPath: "/var/fluent-bit/state"
      readOnly: false
      type: hostpath
    - name: "varlog"
      mountPath: "/var/log"
      readOnly: true
      type: hostpath
    - name: "varlibdockercontainers"
      mountPath: "/var/lib/docker/containers"
      readOnly: true
      type: hostpath
    - name: runlogjournal
      mountPath: "/run/log/journal"
      readOnly: true
      type: hostpath
    - name: dmesg
      mountPath: "/var/log/dmesg"
      readOnly: true
      type: hostpath
    - name: fluentbitconfig
      mountPath: "/fluent-bit/etc"
      readOnly: false
      type: hostpath
    - name: fluentbitconfig
      mountPath: "/fluent-bit/etc"
      readOnly: false
      type: configmap

volumes:
  # - name: mongodb
  #   secret:
  #     secretName: mongodb
  #     defaultMode: 420
  #     optional: false
  # - name: mongodb-armonik-ca
  #   secret:
  #     secretName: mongodb-armonik-ca
  #     defaultMode: 420
  #     optional: false
  - name: cache-volume
    emptyDir: {}
  - name: dmesg
    hostPath:
      path: /var/log/dmesg
      type: ''
  - name: fluentbitconfig
    configMap:
      name: fluent-bit-configmap
      defaultMode: 420
      optional: false
  - name: runlogjournal
    hostPath:
      path: /run/log/journal
      type: ''
  - name: varlibdockercontainers
    hostPath:
      path: /var/lib/docker/containers
      type: ''
  - name: varlog
    hostPath:
      path: /var/log
      type: ''

computePlaneConfigmaps:
  name: compute-plane-configmap
  data:
    ComputePlane__AgentChannel__Address: "/cache/armonik_agent.sock"
    ComputePlane__AgentChannel__SocketType: "unixdomainsocket"
    ComputePlane__WorkerChannel__Address: "/cache/armonik_worker.sock"
    ComputePlane__WorkerChannel__SocketType: "unixdomainsocket"

pollingAgentConfigmaps:
  name: polling-configmap
  data:
    Amqp__LinkCredit: "2"
    ComputePlane__MessageBatchSize: "1"
    InitWorker__WorkerCheckDelay: "00:00:10"
    InitWorker__WorkerCheckRetries: "10"
    Pollster__GraceDelay: "00:00:15"

workerConfigmaps:
  name: worker-configmap
  data:
    FileStorageType: FS
    target_data_path: /data
    target_zip_path: /tmp

# checkFileStorageType: "FS"
# fileStorageType: "hostpath"

preStopWaitScript: "<<EOF while test -e /cache/armonik_agent.sock ; do   sleep 1 done EOF"

# FS:
#   name: "shared-volume"
#   mountPath: "/data"

# hostPath:
#   name: "shared-volume"
#   path: "/home/mjadoui/ArmoniK/infrastructure/quick-de" # (abs(path) à voir dans .tf)

# env:
#   pollingAgentAggregation:
