armonik:
  registry: dockerhubaneo # (Pourquoi dockerhub dans le nom ???)

global:
  namespace: "armonik"

replicaCount: 1

control-plane:
  enabled: true
compute-plane:
  enabled: true
minio:
  enabled: false
redis:
  enabled: false
mongodb:
  enabled: false
mongodb-sharded:
  enabled: false
prometheus:
  enabled: false
rabbitmq:
  enabled: false
 ## 
keda:
  enabled: false
  namespace: armonik
  global:
    namespace: "armonik"
  suffix: ""
  scaleTargetRef:
    apiVersion: "apps/v1"
    kind: "Deployment"
    name: ""
    envSourceContainerName: ".spec.template.spec.containers[0]"
  pollingInterval: 30
  cooldownPeriod: 300
  idleReplicaCount: 0
  minReplicaCount: 1
  maxReplicaCount: 100
  fallback:
    failureThreshold: 3
    replicas: 6
  behavior:
    restoreToOriginalReplicaCount: false
    stabilizationWindowSeconds: 300
    type: Percent
    value: 100
    periodSeconds: 15
  triggers: []
##

metrics-server:
  enabled: false
cluster-autoscaler:
  enabled: false

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

volumes: []

volumeMounts: []

nodeSelector: {}

tolerations: []

affinity: {}


partitionNames:
  - "default"
  - "monitoring"

extraConf:
  core:
    Amqp__AllowHostMismatch: true
    Amqp__MaxPriority: "10"
    Amqp__MaxRetries: "5"
    Amqp__QueueStorage__LockRefreshPeriodicity: "00:00:45"
    Amqp__QueueStorage__PollPeriodicity: "00:00:10"
    Amqp__QueueStorage__LockRefreshExtension: "00:02:00"
    MongoDB__TableStorage__PollingDelayMin: "00:00:01"
    MongoDB__TableStorage__PollingDelayMax: "00:00:10"
    MongoDB__AllowInsecureTls: true
    MongoDB__TableStorage__PollingDelay: "00:00:01"
    MongoDB__DataRetention: "1.00:00:00"
    Redis__Timeout: 30000
    Redis__SslHost: "127.0.0.1"
    Redis__TtlTimeSpan: "1.00:00:00"
  control:
    Submitter__MaxErrorAllowed: "50"

controlPlanConfigmapEnabled: false
controlPlanConfigmap:
  - "control-plane-configmap"
  - "log-configmap"
  - "core-configmap"


logConfigmap:
  enabled: false
  metadata:
    name: "log-configmap-helm"
    namespace: "armonik"
  data:
    loggingLevel: "Information"
  
coreConfigmap:
  enabled: false
  metadata:
    name: "core-configmap-helm"
  data:
    Components__TableStorage: "MongoDB"
    Components__ObjectStorage: "Redis"
    Components__QueueStorage: "Amqp"
    Components__QueueAdaptorSettings__ClassName: "ArmoniK.Core.Adapters.Amqp.QueueBuilder" # data.kubernetes_secret.deployed_queue_storage.data.adapter_class_name
    Components__QueueAdaptorSettings__AdapterAbsolutePath: "/adapters/queue/amqp/ArmoniK.Core.Adapters.Amqp.dll" # data.kubernetes_secret.deployed_queue_storage.data.adapter_absolute_path
    MongoDB__CAFile: "/mongodb/chain.pem" #local.table_storage_adapter_from_secret == "mongodb" ? local.secrets.mongodb.ca_filename : ""
    MongoDB__ReplicaSet: "rs0"
    MongoDB__DatabaseName: "database"
    MongoDB__DirectConnection: "false"
    MongoDB__Tls: "true"
    Redis__CaPath: "/redis/chain.pem" # local.object_storage_adapter_from_secret == "redis" ? local.secrets.redis.ca_filename : ""
    Redis__InstanceName: "ArmoniKRedis"
    Redis__ClientName: "ArmoniK.Core"
    Redis__Ssl: "true"
    Amqp__CaPath: "/amqp/chain.pem" # local.queue_storage_adapter_from_secret == "amqp" ? local.secrets.activemq.ca_filename : ""
    Amqp__Scheme: "AMQPS"
    Authenticator__RequireAuthentication: false # 
    Authenticator__RequireAuthorization: false # 