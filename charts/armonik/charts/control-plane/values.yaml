# Default values for armonik-contorol-plane.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Kubernetes API version to be used
apiVersion: "apps/v1"                                       # Optional. Default: apps/v1
# -- Kid of the Kubernetes resource to be scaled
kind: "Deployment"                                          # Optional. Default: Deployment

nameOverride: "armonik-control-plane"
# -- namespace is the namespace used for all resources
namespace: "armonik"
# -- image is the armonik image and the tag image:tag
image: "dockerhubaneo/armonik_control:0.19.3"
# -- replicaCount is the number of replicas
replicaCount: 1
imagePullSecrets: []
controlPlaneSelector: []
# -- controlPlane contains all the values of the control plane deployment
controlPlane:
  metadata:
    name: "control-plane-helm"
    labels:
      app: "armonik"
      service: "control-plane-helm"
  spec:
    selector:
      matchLabels:
        app: "armonik"
        service: "control-plane-helm"
    template:
      spec:
        containers:
          ports:
            name: "http"
            containerPort: 1080
  annotations: ""
  serviceType: "HeadLess"
  ports:
    containerPort: 1080
    name: "http"
  limits:
    cpu: "1000m"
    memory: "2048Mi"
  requests:
    cpu: "50m"
    memory: "50Mi"
  defaultPartition: "default"
  name: "control-plane-helm"
  imagePullPolicy: IfNotPresent


livenessProbe:
  httpGet:
    path: "/liveness"
    port: 1081
  initialDelaySeconds: 15
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 1

startupProbe:
  httpGet:
    path: "/startup"
    port: 1081
  initialDelaySeconds: 1
  periodSeconds: 3
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 20


extraConf:
  core:
    Amqp__AllowHostMismatch: true
    Amqp__MaxPriority: "10"
    Amqp__MaxRetries: "5"
    Amqp__QueueStorage__LockRefreshPeriodicity: "00:00:45"
    Amqp__QueueStorage__PollPeriodicity: "00:00:10"
    Amqp__QueueStorage__LockRefreshExtension: "00:02:00"
    MongoDB__TableStorage__PollingDelayMin: "00:00:01"
    MongoDB__TableStorage__PollingDelayMax: "00:00:10"
    MongoDB__AllowInsecureTls: true
    MongoDB__TableStorage__PollingDelay: "00:00:01"
    MongoDB__DataRetention: "1.00:00:00"
    Redis__Timeout: 30000
    Redis__SslHost: "127.0.0.1"
    Redis__TtlTimeSpan: "1.00:00:00"
  control:
    Submitter__MaxErrorAllowed: "50"

controlPlanConfigmapEnabled: false
controlPlanConfigmap:
  - "control-plane-configmap"
  - "log-configmap"
  - "core-configmap"

partitionNames:
  - "default"
  - "monitoring"

secrets:
  activemq:
    name: "activemq"
    caFileName: "/amqp/chain.pem"
  mongodb:
    name: "mongodb"
    caFileName: "/mongodb/chain.pem"
  redis:
    name: "redis"
    caFileName: "/redis/chain.pem"
  s3: "s3" # s3_secret_name
  metricsExporter: "metrics-exporter" # metrics_exporter_secret_name
  partitionMetrics_exporter: "partition-metrics-exporter" # partition_metrics_exporter_secret_name
  fluentBit: "fluent-bit" # fluent_bit_secret_name
  seq: "seq" # seq_secret_name
  grafana: "grafana" # grafana_secret_name
  prometheus: "prometheus" # prometheus_secret_name
  deployedObjectStorageSecret: "deployed-object-storage-helm" #eployed_object_storage_secret_name
  deployedTableStorageSecret: "deployed-table-storage-helm" # deployed_table_storage_secret_name
  deployedQueueStorageSecret: "deployed-queue-storage-helm" # deployed_queue_storage_secret_name
  storageEndpointUrl:
    objectStorageAdapter: "Redis" # Redis or S3 (Minio)
    tableStorageAdapter: "MongoDB"
    queueStorageAdapter: "Amqp"
    deployedObjectStorages: 
      - "Redis"
      # - '"S3"'
    deployedTableStorages: 
      - "MongoDB"
    deployedQueueStorages: 
      - "Amqp"
  sharedStorage:
    name: "shared-storage-helm" # shared_storage_secret_name
    hostPath: "data"
    fileStorageType: "HostPath"
    fileServerIp: ""

logConfigmap:
  enabled: false
  metadata:
    name: "log-configmap-helm"
    namespace: "armonik"
  data:
    loggingLevel: "Information"
  
coreConfigmap:
  enabled: false
  metadata:
    name: "core-configmap-helm"
  data:
    Components__TableStorage: "MongoDB"
    Components__ObjectStorage: "Redis"
    Components__QueueStorage: "Amqp"
    Components__QueueAdaptorSettings__ClassName: "ArmoniK.Core.Adapters.Amqp.QueueBuilder" # data.kubernetes_secret.deployed_queue_storage.data.adapter_class_name
    Components__QueueAdaptorSettings__AdapterAbsolutePath: "/adapters/queue/amqp/ArmoniK.Core.Adapters.Amqp.dll" # data.kubernetes_secret.deployed_queue_storage.data.adapter_absolute_path
    MongoDB__CAFile: "/mongodb/chain.pem" #local.table_storage_adapter_from_secret == "mongodb" ? local.secrets.mongodb.ca_filename : ""
    MongoDB__ReplicaSet: "rs0"
    MongoDB__DatabaseName: "database"
    MongoDB__DirectConnection: "false"
    MongoDB__Tls: "true"
    Redis__CaPath: "/redis/chain.pem" # local.object_storage_adapter_from_secret == "redis" ? local.secrets.redis.ca_filename : ""
    Redis__InstanceName: "ArmoniKRedis"
    Redis__ClientName: "ArmoniK.Core"
    Redis__Ssl: "true"
    Amqp__CaPath: "/amqp/chain.pem" # local.queue_storage_adapter_from_secret == "amqp" ? local.secrets.activemq.ca_filename : ""
    Amqp__Scheme: "AMQPS"
    Authenticator__RequireAuthentication: false # 
    Authenticator__RequireAuthorization: false # 

credentials:
  # activemq
  Amqp__User:
    key: username
    name: activemq
  Amqp__Password:
    key: password
    name: activemq
  Amqp__Host:
    key: host
    name: activemq
  Amqp__Port:
    key: port
    name: activemq
  # redis  
  Redis__User:
    key: username
    name: redis
  Redis__Password:
    key: password
    name: redis
  Redis__EndpointUrl:
    key: url
    name: redis
  # mongodb
  MongoDB__User:
    key: username
    name: mongodb
  MongoDB__Password:
    key: password
    name: mongodb
  MongoDB__Host:
    key: host
    name: mongodb
  MongoDB__Port:
    key: port
    name: mongodb
  # s3
  # - key: username
  #   name: s3
  # - key: password
  #   name: mongodb
  # - key: url
  #   name: s3
  # - key: must_force_path_style
  #   name: s3
  # - key: bucket_name
  #   name: s3
  # - key: use_chunk_encoding
  #   name: s3
  # - key: use_check_sum
  #   name: s3

certificates:
  activemq:
    name: "activemq-secret-volume"
    mountPath: "/amqp"
    secretName: "activemq"
  redis:
    name: "redis-secret-volume"
    mountPath: "/redis"
    secretName: "redis"
  mongodb:
    name: "mongodb-secret-volume"
    mountPath: "/mongodb"
    secretName: "mongodb"
