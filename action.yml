name: 'Deploy ArmoniK Infra'
description: 'Action to deploy ArmoniK infra in current github workflow'
inputs:
  control-plane-image:
    description: 'Repository/image for control plane docker image'
    required: false
    default: 'None'
  control-plane-tag:
    description: 'Tag for control plane docker image'
    required: false
    default: 'None'
  polling-agent-image:
    description: 'Repository/image for polling agent docker image'
    required: false
    default: 'None'
  polling-agent-tag:
    description: 'Tag for polling agent docker image'
    required: false
    default: 'None'
  worker-image:
    description: 'Repository/image for worker docker image'
    required: false
    default: 'None'
  worker-tag:
    description: 'Tag for worker docker image'
    required: false
    default: 'None'
  docker-is-installed:
    description: 'Is docker installed ?'
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - name: Install Dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release jq python3 python-is-python3 python3-pip
        pip install python-hcl2 jsonpath-ng

    - if: ${{ inputs.docker-is-installed != 'true' }}
      name: Install docker
      shell: bash
      run: |
        cd ${{ github.action_path }}
        sh tools/install/docker.sh

    - name: Install kubectl
      shell: bash
      run: |
        cd ${{ github.action_path }}
        sh tools/install/kubectl.sh

    - name: Install terraform
      shell: bash
      run: |
        cd ${{ github.action_path }}
        sh tools/install/terraform.sh

    - name: Install K3s
      shell: bash
      run: |
        cd ${{ github.action_path }}
        bash tools/install/k3s.sh

    - name: Init Kube secret
      shell: bash
      run: |
        cd ${{ github.action_path }}
        source infrastructure/utils/scripts/envvars-storage.sh
        bash infrastructure/utils/scripts/init-kube-storage.sh

        source infrastructure/utils/scripts/envvars-armonik.sh
        bash infrastructure/utils/scripts/init-kube-armonik.sh

        source infrastructure/utils/scripts/envvars-monitoring.sh
        bash infrastructure/utils/scripts/init-kube-monitoring.sh

    - name: Deploy Onpremise Storage
      shell: bash
      run: |
        set -ex
        cd ${{ github.action_path }}/infrastructure/storage/onpremise
        terraform init
        terraform apply -var-file parameters.tfvars -auto-approve

    - name: Create a configuration file for ArmoniK
      shell: bash
      run: |
        set -ex
        cd ${{ github.action_path }}/infrastructure/storage/onpremise
        terraform output -json > tmp.json
        #sed -i '1d;$d' tmp.json
        cat tmp.json
        export ACTIVEMQ_HOST=$(cat tmp.json | jq -r '.activemq_endpoint_url.value.host')
        export ACTIVEMQ_PORT=$(cat tmp.json | jq -r '.activemq_endpoint_url.value.port')
        export MONGODB_HOST=$(cat tmp.json | jq -r '.mongodb_endpoint_url.value.host')
        export MONGODB_PORT=$(cat tmp.json | jq -r '.mongodb_endpoint_url.value.port')
        export REDIS_URL=$(cat tmp.json | jq -r '.redis_endpoint_url.value.url')
        echo $ACTIVEMQ_HOST
        echo $ACTIVEMQ_PORT
        echo $MONGODB_HOST
        echo $MONGODB_PORT
        echo $REDIS_URL

        python ${{ github.action_path }}/tools/modify_parameters.py \
            -kv storage.object=Redis \
            -kv storage.table=MongoDB \
            -kv storage.queue=Amqp \
            -kv storage.shared=HostPath \
            -kv storage_endpoint_url.mongodb.host=$MONGODB_HOST \
            -kv storage_endpoint_url.mongodb.port=$MONGODB_PORT \
            -kv storage_endpoint_url.activemq.host=$ACTIVEMQ_HOST \
            -kv storage_endpoint_url.activemq.port=$ACTIVEMQ_PORT \
            -kv storage_endpoint_url.redis.url=$REDIS_URL \
            ${{ github.action_path }}/infrastructure/armonik/parameters/storage-parameters.tfvars \
            ${{ github.action_path }}/infrastructure/armonik/storage-parameters.tfvars.json

        python ${{ github.action_path }}/tools/modify_parameters.py \
            -kv "compute_plane.worker[*].image=${{ inputs.worker-image }}" \
            -kv "compute_plane.worker[*].tag=${{ inputs.worker-tag }}" \
            -kv compute_plane.image=${{ inputs.polling-agent-image }} \
            -kv compute_plane.tag=${{ inputs.polling-agent-tag }} \
            -kv control_plane.image=${{ inputs.control-plane-image }} \
            -kv control_plane.tag=${{ inputs.control-plane-tag }} \
            -kv logging_level=Verbose \
            ${{ github.action_path }}/infrastructure/armonik/parameters/armonik-parameters.tfvars \
            ${{ github.action_path }}/infrastructure/armonik/armonik-parameters.tfvars.json

        python ${{ github.action_path }}/tools/modify_parameters.py \
            ${{ github.action_path }}/infrastructure/armonik/parameters/monitoring-parameters.tfvars \
            ${{ github.action_path }}/infrastructure/armonik/monitoring-parameters.tfvars.json

    - name: Deploy ArmoniK on single node
      shell: bash
      run: |
        set -ex
        cd ${{ github.action_path }}/infrastructure/armonik/
        cat armonik-parameters.tfvars.json
        cat storage-parameters.tfvars.json
        cat monitoring-parameters.tfvars.json
        terraform init
        terraform apply -var-file=armonik-parameters.tfvars.json \
                        -var-file=storage-parameters.tfvars.json \
                        -var-file=monitoring-parameters.tfvars.json \
                        -auto-approve
    - name: Copy logs
      if: always()
      shell: bash
      run: |
        set -e
        mkdir -p /tmp/armoniklogs
        sudo cp -rL /var/log/pods/armonik* /tmp/armoniklogs
        sudo chown $USER -R /tmp/armoniklogs
        find /tmp/armoniklogs -name "*.log"

    - name: Store logs
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: Logs ArmoniK - ${{ github.job }}
        path: /tmp/armoniklogs/**/*.log
        retention-days: 5