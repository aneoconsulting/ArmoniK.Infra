name: DeployTest

on:
  push:
    branches: [ '**' ]
    tags-ignore: [ '**' ]

jobs:
  versionning:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    outputs:
      version: ${{ steps.genver.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Generate Version
        id: genver
        run: |
          VERSION=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=release --dev-branch=main)
          echo "::set-output name=version::$VERSION"
          echo $VERSION

  htcMockTest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Get Core Tag
        id: core
        run: |
          TAG=$(grep "core-tag" armonik-versions.txt | tail -1 | cut -d "=" -f 2)
          echo "::set-output name=tag::$TAG"

      - uses: ./
        name: Deploy infrastructure
        id: deploy-infra
        with:
          metrics-exporter-image: dockerhubaneo/armonik_control_metrics
          control-plane-image: dockerhubaneo/armonik_control
          polling-agent-image: dockerhubaneo/armonik_pollingagent
          worker-image: dockerhubaneo/armonik_core_htcmock_test_worker
          core-tag: ${{ steps.core.outputs.tag }}
          worker-tag: ${{ steps.core.outputs.tag }}

      - name: Test HTC Mock
        shell: bash
        run: |
          set -ex
          export CPIP=$(kubectl get svc control-plane -n armonik -o custom-columns="IP:.spec.clusterIP" --no-headers=true)
          export CPPort=$(kubectl get svc control-plane -n armonik -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
          export Grpc__Endpoint=http://$CPIP:$CPPort
          docker run --rm \
            -e Grpc__Endpoint="${Grpc__Endpoint}" \
            -e HtcMock__NTasks=1000 \
            -e HtcMock__TotalCalculationTime="00:00:00.100" \
            -e HtcMock__DataSize="1" \
            -e HtcMock__MemorySize="1" \
            -e HtcMock__SubTasksLevels="4" \
            dockerhubaneo/armonik_core_htcmock_test_client:${{ steps.core.outputs.tag }}

      - name: Copy logs
        if: always()
        shell: bash
        run: |
          set -e
          mkdir -p /tmp/armoniklogs
          sudo cp -rL /var/log/pods/armonik_* /tmp/armoniklogs
          sudo chown $USER -R /tmp/armoniklogs
          find /tmp/armoniklogs -name "*.log"

      - name: Store logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Logs HTC Mock
          path: /tmp/armoniklogs/**/*.log
          retention-days: 5

  coreStreamTest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Get Core Tag
        id: core
        run: |
          TAG=$(grep "core-tag" armonik-versions.txt | tail -1 | cut -d "=" -f 2)
          echo "::set-output name=tag::$TAG"

      - uses: ./
        name: Deploy infrastructure
        id: deploy-infra
        with:
          metrics-exporter-image: dockerhubaneo/armonik_control_metrics
          control-plane-image: dockerhubaneo/armonik_control
          polling-agent-image: dockerhubaneo/armonik_pollingagent
          worker-image: dockerhubaneo/armonik_core_stream_test_worker
          core-tag: ${{ steps.core.outputs.tag }}
          worker-tag: ${{ steps.core.outputs.tag }}

      - name: Test Core Stream
        shell: bash
        run: |
          set -ex
          export CPIP=$(kubectl get svc control-plane -n armonik -o custom-columns="IP:.spec.clusterIP" --no-headers=true)
          export CPPort=$(kubectl get svc control-plane -n armonik -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
          export Grpc__Endpoint=http://$CPIP:$CPPort
          docker run --rm \
            -e Grpc__Endpoint="${Grpc__Endpoint}" \
            dockerhubaneo/armonik_core_stream_test_client:${{ steps.core.outputs.tag }}

      - name: Copy logs
        if: always()
        shell: bash
        run: |
          set -e
          mkdir -p /tmp/armoniklogs
          sudo cp -rL /var/log/pods/armonik_* /tmp/armoniklogs
          sudo chown $USER -R /tmp/armoniklogs
          find /tmp/armoniklogs -name "*.log"

      - name: Store logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Logs Core Stream
          path: /tmp/armoniklogs/**/*.log
          retention-days: 5

  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        include:
          - name: HTC Mock
            metrics-exporter-image: dockerhubaneo/armonik_control_metrics
            control-plane-image: dockerhubaneo/armonik_control
            polling-agent-image: dockerhubaneo/armonik_pollingagent
            worker-image: dockerhubaneo/armonik_core_htcmock_test_worker
            client-image: dockerhubaneo/armonik_core_htcmock_test_client
          - name: Core Stream
            metrics-exporter-image: dockerhubaneo/armonik_control_metrics
            control-plane-image: dockerhubaneo/armonik_control
            polling-agent-image: dockerhubaneo/armonik_pollingagent
            worker-image: dockerhubaneo/armonik_core_stream_test_worker
            client-image: dockerhubaneo/armonik_core_stream_test_client
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Get Core Tag
        id: core
        run: |
          TAG=$(grep "core-tag" armonik-versions.txt | tail -1 | cut -d "=" -f 2)
          echo "::set-output name=tag::$TAG"

      - uses: ./
        name: Deploy infrastructure
        id: deploy-infra
        with:
          metrics-exporter-image: ${{ matrix.metrics-exporter-image }}
          control-plane-image: ${{ matrix.control-plane-image }}
          polling-agent-image: ${{ matrix.polling-agent-image }}
          worker-image: ${{ matrix.worker-image }}
          core-tag: ${{ steps.core.outputs.tag }}
          worker-tag: ${{ steps.core.outputs.tag }}

      - name: Test ${{ matrix.name }}
        shell: bash
        run: |
          set -ex
          export CPIP=$(kubectl get svc control-plane -n armonik -o custom-columns="IP:.spec.clusterIP" --no-headers=true)
          export CPPort=$(kubectl get svc control-plane -n armonik -o custom-columns="PORT:.spec.ports[*].port" --no-headers=true)
          export Grpc__Endpoint=http://$CPIP:$CPPort
          docker run --rm -e Grpc__Endpoint="${Grpc__Endpoint}" ${{ matrix.client-image }}:${{ steps.core.outputs.tag }}

      - name: Copy logs
        if: always()
        shell: bash
        run: |
          set -e
          mkdir -p /tmp/armoniklogs
          sudo cp -rL /var/log/pods/armonik_* /tmp/armoniklogs
          sudo chown $USER -R /tmp/armoniklogs
          find /tmp/armoniklogs -name "*.log"

      - name: Store logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Logs ${{ matrix.name }}
          path: /tmp/armoniklogs/**/*.log
          retention-days: 5



