nameOverride: ""
replicaCount: 1
namespace: armonik
shareProcessNamespace: false
restartPolicy: Always
registry: dockerhubaneo

computePlane:
  metadata:
    name: "compute-plane"
    labels:
      app: "armonik"
      service: "compute-plane"
  partition: 
    default:
      replicas: 1
      pollingAgent:
        image: "armonik_pollingagent"
        tag: "0.31.0"
        imagePullPolicy: "IfNotPresent"
        limits:
          cpu: "1000m"
          memory: "1024Mi"
        requests:
          cpu: "50m"
          memory: "50Mi"
        securityContext:
          capabilities:
            drop:
            - SYS_PTRACE  
      annotations: {}
      nodeSelector: {}
      tolerations: []
      terminationGracePeriodSeconds: 30
      readinessProbe: {}
      livenessProbe:
        httpGet:
          path: "/liveness"
          port: 1080
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 10
        timeoutSeconds: 10
        successThreshold: 1
        failureThreshold: 3
      startupProbe:
        httpGet:
          path: "/startup"
          port: 1080
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 3
        timeoutSeconds: 1
        successThreshold: 1
        failureThreshold: 20
      envHardValue:
        - name: Amqp__PartitionId
          value: default
        - name: PubSub__PartitionId
          value: default
        - name: SQS__PartitionId
          value: default
      # ArmoniK workers
      worker:
        - name: "worker"
          image: "armonik_worker_dll"
          tag: "0.18.0"
          imagePullPolicy: "IfNotPresent"
          limits:
            cpu: "1000m"
            memory: "1024Mi"
          requests:
            cpu: "50m"
            memory: "50Mi"
      hpa:
        type: "prometheus"
        polling_interval: 15
        cooldown_period: 300
        min_replica_count: 0
        max_replica_count: 5
        behavior:
          restore_to_original_replica_count: true
          stabilization_window_seconds: 300
          type: "Percent"
          value: 100
          period_seconds: 15
        triggers:
          - type: "prometheus"
            threshold: 2

    # Partition for the stream worker
    stream:
      replicas: 1
      pollingAgent:
        image: "armonik_pollingagent"
        tag: "0.31.0"
        imagePullPolicy: "IfNotPresent"
        limits:
          cpu: "1000m"
          memory: "1024Mi"
        requests:
          cpu: "50m"
          memory: "50Mi"
        securityContext:
          capabilities:
            drop: 
            - "SYS_PTRACE"  
      annotations: {}
      nodeSelector: {}
      tolerations: []
      terminationGracePeriodSeconds: 30
      readinessProbe: {}
      livenessProbe:
        httpGet:
          path: "/liveness"
          port: 1080
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 10
        timeoutSeconds: 10
        successThreshold: 1
        failureThreshold: 3
      startupProbe:
        httpGet:
          path: "/startup"
          port: 1080
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 3
        timeoutSeconds: 1
        successThreshold: 1
        failureThreshold: 20
      envHardValue:
        - name: Amqp__PartitionId
          value: stream
        - name: PubSub__PartitionId
          value: stream
        - name: SQS__PartitionId
          value: stream
        - name: MongoDB__User
          value: root
      # ArmoniK workers
      worker:
        - name: "worker"
          image: "armonik_core_stream_test_worker"
          tag: "0.31.0"
          imagePullPolicy: "IfNotPresent"
          limits:
            cpu: "1000m"
            memory: "1024Mi"
          requests:
            cpu: "50m"
            memory: "50Mi"
      hpa:
        type: "prometheus"
        polling_interval: 15
        cooldown_period: 300
        min_replica_count: 0
        max_replica_count: 5
        behavior:
          restore_to_original_replica_count: true
          stabilization_window_seconds: 300
          type: "Percent"
          value: 100
          period_seconds: 15
        triggers:
          - type: "prometheus"
            threshold: 2

    # Partition for the htcmock worker        
    htcmock:
      replicas: 1
      pollingAgent:
        image: "armonik_pollingagent"
        tag: "0.31.0"
        imagePullPolicy: "IfNotPresent"
        limits:
          cpu: "1000m"
          memory: "1024Mi"
        requests:
          cpu: "50m"
          memory: "50Mi"
        securityContext:
          capabilities:
            drop: 
            - SYS_PTRACE  
      annotations: {}
      nodeSelector: {}
      tolerations: []
      terminationGracePeriodSeconds: 30
      ImagePullSecrets:
        - name: "IfNotPresent"
      readinessProbe: {}
      livenessProbe:
        httpGet:
          path: "/liveness"
          port: 1080
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 10
        timeoutSeconds: 10
        successThreshold: 1
        failureThreshold: 3
      startupProbe:
        httpGet:
          path: "/startup"
          port: 1080
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 3
        timeoutSeconds: 1
        successThreshold: 1
        failureThreshold: 20
      envHardValue:
        - name: Amqp__PartitionId
          value: htcmock
        - name: PubSub__PartitionId
          value: htcmock
        - name: SQS__PartitionId
          value: htcmock
        - name: MongoDB__User
          value: root
      # ArmoniK workers
      worker:
        - name: "worker"
          image: "armonik_core_htcmock_test_worker"
          tag: "0.31.0"
          imagePullPolicy: "IfNotPresent"
          limits:
            cpu: "1000m"
            memory: "1024Mi"
          requests:
            cpu: "50m"
            memory: "50Mi"
      hpa:
        type: "prometheus"
        polling_interval: 15
        cooldown_period: 300
        min_replica_count: 0
        max_replica_count: 5
        behavior:
          restore_to_original_replica_count: true
          stabilization_window_seconds: 300
          type: "Percent"
          value: 100
          period_seconds: 15
        triggers:
          - type: "prometheus"
            threshold: 2

    # Partition for the bench worker        
    bench:
      replicas: 1
      pollingAgent:
        image: "armonik_pollingagent"
        tag: "0.31.0"
        imagePullPolicy: "IfNotPresent"
        limits:
          cpu: "1000m"
          memory: "1024Mi"
        requests:
          cpu: "50m"
          memory: "50Mi"
        securityContext:
          capabilities:
            drop: 
            - SYS_PTRACE
      annotations: {}
      nodeSelector: {}
      tolerations: []
      terminationGracePeriodSeconds: 30
      readinessProbe: {}
      livenessProbe:
        httpGet:
          path: "/liveness"
          port: 1080
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 10
        timeoutSeconds: 10
        successThreshold: 1
        failureThreshold: 3
      startupProbe:
        httpGet:
          path: "/startup"
          port: 1080
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 3
        timeoutSeconds: 1
        successThreshold: 1
        failureThreshold: 20
      envHardValue:
        - name: Amqp__PartitionId
          value: bench
        - name: PubSub__PartitionId
          value: bench
        - name: SQS__PartitionId
          value: bench
        - name: MongoDB__User
          value: root
      # ArmoniK workers
      worker:
        - name: "worker"
          image: "armonik_core_bench_test_worker"
          tag: "0.31.0"
          imagePullPolicy: "IfNotPresent"
          limits:
            cpu: "1000m"
            memory: "1024Mi"
          requests:
            cpu: "500m"
            memory: "512Mi"
      hpa:
        type: "prometheus"
        polling_interval: 15
        cooldown_period: 300
        min_replica_count: 0
        max_replica_count: 5
        behavior:
          restore_to_original_replica_count: true
          stabilization_window_seconds: 300
          type: "Percent"
          value: 100
          period_seconds: 15
        triggers:
          - type: "prometheus"
            threshold: 2

pollingAgent:
  name: polling-agent
  ports:
    name: poll-agent-port
    containerPort: 1080
  #volumeMounts:
    # - name: "activemq-crt"
    #   mountPath: "/amqp"
    #   mountPropagation: None
    #   readOnly: true
    # - name: mongodb-ca
    #   mountPath: "/mongodb/certs/"
    #   mountPropagation: None
    #   readOnly: true
    # - name: "redis-crt"
    #   mountPath: "/redis"
    #   mountPropagation: None
    #   readOnly: true
  envSecretValue:
    - name: MongoDB__Password
      valueFrom:
        secretKeyRef:
          key: mongodb-root-password
          name: mongodb
          optional: false
    # - name: MongoDB__User
    #   valueFrom:
    #     secretKeyRef:
    #       key: username
    #       name: mongodb-user
    #       optional: false
    - name: Redis__Password
      valueFrom:
        secretKeyRef:
          key: redis-password
          name: redis
  envConfigValue: []
  envFrom:
    # - secretRef:
    #     name: mongodb-ca
    #     optional: false
    # - secretRef:
    #     name: activemq-crt
    #     optional: false
    # - secretRef:
    #     name: redis-crt
    #     optional: false
    - configMapRef:
        name: compute-plane-configmap
        optional: false
    - configMapRef:
        name: core-configmap
        optional: false
    - configMapRef:
        name: log-configmap
        optional: false
    - configMapRef:
        name: polling-configmap
        optional: false

worker:
  name: worker
  ports:
    name: worker-port
    containerPort: 1081
  livenessProbe:
    httpGet:
      path: "/liveness"
      port: 1081
      scheme: HTTP
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  startupProbe:
    httpGet:
      path: "/startup"
      port: 1081
      scheme: HTTP
    initialDelaySeconds: 1
    periodSeconds: 3
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 20
  terminationMessagePath: "/dev/termination-log"
  terminationMessagePolicy: "File"
  resource:
    limits:
      cpu: "1000m"
      memory: "1024Mi"
    requests:
      cpu: "50m"
      memory: "50Mi"
  volumes:
    - name: "shared-volume"
      hostPath:
        path: "/data"
        type: Directory
    - name: "cache-volume"
  envHardValue: []
  envSecretValue: []
  envConfigValue: []
  envFrom:
    - configMapRef:
        name: compute-plane-configmap
        optional: false
    - configMapRef:
        name: log-configmap
        optional: false
    - configMapRef:
        name: worker-configmap
        optional: false

fluentBit:
  isDaemonSet: true
  name: "fluent-bit"
  image: "fluent/fluent-bit"
  tag: "2.0.9"
  imagePullPolicy: "IfNotPresent"
  configMapRef: "fluent-bit-config"
  volumeMounts:
    - name: "cache-volume"
      mountPath: "/cache"
      readOnly: true
  fluentVolumes:
    - name: "fluentbitstate"
      mountPath: "/var/fluent-bit/state"
      readOnly: false
      type: hostpath
    - name: "varlog"
      mountPath: "/var/log"
      readOnly: true
      type: hostpath
    - name: "varlibdockercontainers"
      mountPath: "/var/lib/docker/containers"
      readOnly: true
      type: hostpath
    - name: runlogjournal
      mountPath: "/run/log/journal"
      readOnly: true
      type: hostpath
    - name: dmesg
      mountPath: "/var/log/dmesg"
      readOnly: true
      type: hostpath
    - name: fluentbitconfig
      mountPath: "/fluent-bit/etc"
      readOnly: false
      type: hostpath
    - name: fluentbitconfig
      mountPath: "/fluent-bit/etc"
      readOnly: false
      type: configmap

volumeMounts:
  - name: "cache-volume"
    mountPath: "/cache"
    mountPropagation: None

computePlaneConfigmaps:
  name: compute-plane-configmap
  data:
    ComputePlane__AgentChannel__Address: "/cache/armonik_agent.sock"
    ComputePlane__AgentChannel__SocketType: "unixdomainsocket"
    ComputePlane__WorkerChannel__Address: "/cache/armonik_worker.sock"
    ComputePlane__WorkerChannel__SocketType: "unixdomainsocket"

pollingAgentConfigmaps:
  name: polling-configmap
  data:
    Amqp__LinkCredit: "2"
    ComputePlane__MessageBatchSize: "1"
    InitWorker__WorkerCheckDelay: "00:00:10"
    InitWorker__WorkerCheckRetries: "10"
    Pollster__GraceDelay: "00:00:15"

workerConfigmaps:
  name: worker-configmap
  data:
    FileStorageType: FS
    target_data_path: /data
    target_zip_path: /tmp    

# checkFileStorageType: "FS"
# fileStorageType: "hostpath"

preStopWaitScript: "<<EOF while test -e /cache/armonik_agent.sock ; do   sleep 1 done EOF"

# FS: 
#   name: "shared-volume"
#   mountPath: "/data"

# hostPath: 
#   name: "shared-volume"
#   path: "/home/mjadoui/ArmoniK/infrastructure/quick-de" # (abs(path) à voir dans .tf)

# env: 
#   pollingAgentAggregation:
    

