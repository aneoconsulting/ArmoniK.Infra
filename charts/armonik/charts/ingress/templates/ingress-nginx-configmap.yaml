apiVersion: v1
immutable: false
kind: ConfigMap
metadata:
  name: ingress-nginx
data:
  armonik.conf: |
    map $http_accept_language $accept_language {
        default en;
        ~*^en en;
    }
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    server {
        listen {{ .Values.ingress.ports.http.containerPort}};
        listen [::]:{{ .Values.ingress.ports.http.containerPort}};
        listen {{ .Values.ingress.ports.grpc.containerPort}} http2;
        listen [::]:{{ .Values.ingress.ports.grpc.containerPort}} http2;

        sendfile on;
        resolver kube-dns.kube-system ipv6=off;

        location = / {
            rewrite ^ $scheme://$http_host/admin/$accept_language/;
        }

        location = /admin {
            rewrite ^ $scheme://$http_host/admin/$accept_language/;
        }
        location = /admin/ {
            rewrite ^ $scheme://$http_host/admin/$accept_language/;
        }
        location = /admin/en {
            rewrite ^ $scheme://$http_host/admin/en/;
        }
        set $admin_app_upstream http://admin-gui.{{ .Values.namespace }}.svc.cluster.local:1080;
        location /admin/ {
            proxy_pass $admin_app_upstream$uri$is_args$args;
        }
        set $armonik_upstream grpc://control-plane.{{ .Values.namespace }}.svc.cluster.local:5001;
        location ~* ^/armonik\. {
            grpc_pass $armonik_upstream;

            # Apparently, multiple chunks in a grpc stream is counted has a single body
            # So disable the limit
            client_max_body_size 0;

            # add a timeout of 1 month to avoid grpc exception for long task
            # TODO: find better configuration
            proxy_read_timeout 30d;
            proxy_send_timeout 1d;
            grpc_read_timeout 30d;
            grpc_send_timeout 1d;
        }

        location /static/ {
            alias /static/;
        }

    proxy_buffering off;
    proxy_request_buffering off;

        set $seq_upstream http://seq.armonik.svc.cluster.local;
        location = /seq {
            rewrite ^ $scheme://$http_host/seq/ permanent;
        }
        location /seq/ {
            proxy_set_header Host $http_host;
            proxy_set_header Accept-Encoding "";
            rewrite  ^/seq/(.*)  /$1 break;
            proxy_pass $seq_upstream$uri$is_args$args;
            sub_filter '<head>' '<head><base href="${scheme}://${http_host}/seq/">';
            sub_filter_once on;
            proxy_hide_header content-security-policy;
        }
        set $grafana_upstream http://grafana.armonik.svc.cluster.local;
        location = /grafana {
            rewrite ^ $scheme://$http_host/grafana/login permanent;
        }
        location /grafana {
            rewrite  ^/grafana/(.*)  /$1 break;
            proxy_set_header Host $http_host;
            proxy_pass $grafana_upstream$uri$is_args$args;
            sub_filter '<head>' '<head><base href="${scheme}://${http_host}/grafana/">';
            sub_filter_once on;
            proxy_intercept_errors on;
            error_page 301 302 307 =302 ${scheme}://${http_host}${upstream_http_location};
        }
        location /grafana/api/live {
            rewrite  ^/grafana/(.*)  /$1 break;
            proxy_http_version 1.1;
            proxy_set_header Host $http_host;
            proxy_pass $grafana_upstream$uri$is_args$args;
        }
    }
