name: 'Deploy ArmoniK Infra'
description: 'Action to deploy ArmoniK infra in current github workflow'
inputs:
  control-plane-image:
    description: 'Repository/image for control plane docker image'
    required: false
    default: 'None'
  control-plane-tag:
    description: 'Tag for control plane docker image'
    required: false
    default: 'None'
  polling-agent-image:
    description: 'Repository/image for polling agent docker image'
    required: false
    default: 'None'
  polling-agent-tag:
    description: 'Tag for polling agent docker image'
    required: false
    default: 'None'
  worker-image:
    description: 'Repository/image for worker docker image'
    required: false
    default: 'None'
  worker-tag:
    description: 'Tag for worker docker image'
    required: false
    default: 'None'
  docker-is-installed:
    description: 'Is docker installed ?'
    required: false
    default: 'false'
outputs:
  credentials-ca-crt:
    description: "Random number"
    value: ${{ steps.credentialsoutput.outputs.credentials-ca-crt }}
  credentials-certificate-pfx:
    description: "Random number"
    value: ${{ steps.credentialsoutput.outputs.credentials-certificate-pfx }}
  credentials-redis:
    description: "Random number"
    value: ${{ steps.credentialsoutput.outputs.credentials-redis }}
  credentials-redis-ca-p7b:
    description: "Random number"
    value: ${{ steps.credentialsoutput.outputs.credentials-redis-ca-p7b }}

runs:
  using: composite
  steps:
    - name: Install Dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release jq python3 python-is-python3 python3-pip
        pip install python-hcl2

    - if: ${{ inputs.docker-is-installed != 'true' }}
      name: Install docker
      shell: bash
      run: |
        sh tools/install/docker.sh

    - name: Install kubectl
      shell: bash
      run: |
        sh tools/install/kubectl.sh

    - name: Install terraform
      shell: bash
      run: |
        sh tools/install/terraform.sh

    - name: Install K3s
      shell: bash
      run: |
        cd ${{ github.action_path }}
        bash tools/install/k3s.sh

    - name: Init Kube secret
      shell: bash
      run: |
        cd ${{ github.action_path }}
        source infrastructure/utils/scripts/envvars-storage.sh
        bash infrastructure/utils/scripts/init-kube-storage.sh

        source infrastructure/utils/scripts/envvars-armonik.sh
        bash infrastructure/utils/scripts/init-kube-armonik.sh

        source infrastructure/utils/scripts/envvars-monitoring.sh
        bash infrastructure/utils/scripts/init-kube-monitoring.sh

    - name: Set credentials output
      id: credentialsoutput
      shell: bash
      run: |
        echo "::set-output name=credentials-ca-crt::${{ github.action_path }}/infrastructure/security/certificates/ca.crt"
        echo "::set-output name=credentials-certificate-pfx::${{ github.action_path }}/infrastructure/security/certificates/certificate.pfx"
        echo "::set-output name=credentials-redis::${{ github.action_path }}/infrastructure/security/credentials/redis-credentials.json"
        echo "::set-output name=credentials-redis-ca-p7b::${{ github.action_path }}/infrastructure/security/certificates/chain.p7b"

    - name: Deploy Onpremise Storage
      shell: bash
      run: |
        set -ex
        cd ${{ github.action_path }}/infrastructure/storage/onpremise
        terraform init
        terraform apply -var-file parameters.tfvars -auto-approve

    - name: Create a configuration file for ArmoniK
      shell: bash
      run: |
        set -ex
        cd ${{ github.action_path }}/infrastructure/storage/onpremise
        terraform output -json > tmp.json
        #sed -i '1d;$d' tmp.json
        cat tmp.json
        export ACTIVEMQ_HOST=$(cat tmp.json | jq -r '.activemq_endpoint_url.value.host')
        export ACTIVEMQ_PORT=$(cat tmp.json | jq -r '.activemq_endpoint_url.value.port')
        export MONGODB_HOST=$(cat tmp.json | jq -r '.mongodb_endpoint_url.value.host')
        export MONGODB_PORT=$(cat tmp.json | jq -r '.mongodb_endpoint_url.value.port')
        export REDIS_URL=$(cat tmp.json | jq -r '.redis_endpoint_url.value.url')
        echo $ACTIVEMQ_HOST
        echo $ACTIVEMQ_PORT
        echo $MONGODB_HOST
        echo $MONGODB_PORT
        echo $REDIS_URL

        python ${{ github.action_path }}/tools/modify_parameters.py \
            --storage-object "Redis" \
            --storage-table "MongoDB" \
            --storage-queue "Amqp" \
            --storage-lease-provider "MongoDB" \
            --storage-external "Redis" \
            --storage-shared-type "HostPath" \
            --mongodb-host $MONGODB_HOST \
            --mongodb-port $MONGODB_PORT \
            --mongodb-kube-secret "mongodb-storage-secret" \
            --activemq-host $ACTIVEMQ_HOST \
            --activemq-port $ACTIVEMQ_PORT \
            --activemq-kube-secret "activemq-storage-secret" \
            --redis-url $REDIS_URL \
            --redis-kube-secret "redis-storage-secret" \
            --external-url $REDIS_URL \
            --external-kube-secret "external-redis-storage-secret" \
            ${{ github.action_path }}/infrastructure/armonik/parameters/storage-parameters.tfvars \
            ${{ github.action_path }}/infrastructure/armonik/storage-parameters.tfvars.json

        python ${{ github.action_path }}/tools/modify_parameters.py \
            --worker-image ${{ inputs.worker-image }} \
            --worker-tag ${{ inputs.worker-tag }} \
            --polling-agent-image ${{ inputs.polling-agent-image }} \
            --polling-agent-tag ${{ inputs.polling-agent-tag }} \
            --control-plane-image ${{ inputs.control-plane-image }} \
            --control-plane-tag ${{ inputs.control-plane-tag }} \
            ${{ github.action_path }}/infrastructure/armonik/parameters/armonik-parameters.tfvars \
            ${{ github.action_path }}/infrastructure/armonik/armonik-parameters.tfvars.json

        python ${{ github.action_path }}/tools/modify_parameters.py \
            ${{ github.action_path }}/infrastructure/armonik/parameters/monitoring-parameters.tfvars \
            ${{ github.action_path }}/infrastructure/armonik/monitoring-parameters.tfvars.json

    - name: Deploy ArmoniK on single node
      shell: bash
      run: |
        set -ex
        cd ${{ github.action_path }}/infrastructure/armonik/
        cat armonik-parameters.tfvars.json
        cat storage-parameters.tfvars.json
        cat monitoring-parameters.tfvars.json
        terraform init
        terraform apply -var-file=armonik-parameters.tfvars.json \
                        -var-file=storage-parameters.tfvars.json \
                        -var-file=monitoring-parameters.tfvars.json \
                        -auto-approve